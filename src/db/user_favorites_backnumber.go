// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserFavoritesBacknumber is an object representing the database table.
type UserFavoritesBacknumber struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UUID         string    `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	UserID       int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	BacknumberID int       `boil:"backnumber_id" json:"backnumber_id" toml:"backnumber_id" yaml:"backnumber_id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *userFavoritesBacknumberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userFavoritesBacknumberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserFavoritesBacknumberColumns = struct {
	ID           string
	UUID         string
	UserID       string
	BacknumberID string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	UUID:         "uuid",
	UserID:       "user_id",
	BacknumberID: "backnumber_id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var UserFavoritesBacknumberTableColumns = struct {
	ID           string
	UUID         string
	UserID       string
	BacknumberID string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "user_favorites_backnumber.id",
	UUID:         "user_favorites_backnumber.uuid",
	UserID:       "user_favorites_backnumber.user_id",
	BacknumberID: "user_favorites_backnumber.backnumber_id",
	CreatedAt:    "user_favorites_backnumber.created_at",
	UpdatedAt:    "user_favorites_backnumber.updated_at",
}

// Generated where

var UserFavoritesBacknumberWhere = struct {
	ID           whereHelperint
	UUID         whereHelperstring
	UserID       whereHelperint
	BacknumberID whereHelperint
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: "\"user_favorites_backnumber\".\"id\""},
	UUID:         whereHelperstring{field: "\"user_favorites_backnumber\".\"uuid\""},
	UserID:       whereHelperint{field: "\"user_favorites_backnumber\".\"user_id\""},
	BacknumberID: whereHelperint{field: "\"user_favorites_backnumber\".\"backnumber_id\""},
	CreatedAt:    whereHelpertime_Time{field: "\"user_favorites_backnumber\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"user_favorites_backnumber\".\"updated_at\""},
}

// UserFavoritesBacknumberRels is where relationship names are stored.
var UserFavoritesBacknumberRels = struct {
	Backnumber string
	User       string
}{
	Backnumber: "Backnumber",
	User:       "User",
}

// userFavoritesBacknumberR is where relationships are stored.
type userFavoritesBacknumberR struct {
	Backnumber *Backnumber `boil:"Backnumber" json:"Backnumber" toml:"Backnumber" yaml:"Backnumber"`
	User       *User       `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userFavoritesBacknumberR) NewStruct() *userFavoritesBacknumberR {
	return &userFavoritesBacknumberR{}
}

// userFavoritesBacknumberL is where Load methods for each relationship are stored.
type userFavoritesBacknumberL struct{}

var (
	userFavoritesBacknumberAllColumns            = []string{"id", "uuid", "user_id", "backnumber_id", "created_at", "updated_at"}
	userFavoritesBacknumberColumnsWithoutDefault = []string{"uuid", "user_id", "backnumber_id", "created_at", "updated_at"}
	userFavoritesBacknumberColumnsWithDefault    = []string{"id"}
	userFavoritesBacknumberPrimaryKeyColumns     = []string{"id"}
)

type (
	// UserFavoritesBacknumberSlice is an alias for a slice of pointers to UserFavoritesBacknumber.
	// This should almost always be used instead of []UserFavoritesBacknumber.
	UserFavoritesBacknumberSlice []*UserFavoritesBacknumber
	// UserFavoritesBacknumberHook is the signature for custom UserFavoritesBacknumber hook methods
	UserFavoritesBacknumberHook func(context.Context, boil.ContextExecutor, *UserFavoritesBacknumber) error

	userFavoritesBacknumberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userFavoritesBacknumberType                 = reflect.TypeOf(&UserFavoritesBacknumber{})
	userFavoritesBacknumberMapping              = queries.MakeStructMapping(userFavoritesBacknumberType)
	userFavoritesBacknumberPrimaryKeyMapping, _ = queries.BindMapping(userFavoritesBacknumberType, userFavoritesBacknumberMapping, userFavoritesBacknumberPrimaryKeyColumns)
	userFavoritesBacknumberInsertCacheMut       sync.RWMutex
	userFavoritesBacknumberInsertCache          = make(map[string]insertCache)
	userFavoritesBacknumberUpdateCacheMut       sync.RWMutex
	userFavoritesBacknumberUpdateCache          = make(map[string]updateCache)
	userFavoritesBacknumberUpsertCacheMut       sync.RWMutex
	userFavoritesBacknumberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userFavoritesBacknumberBeforeInsertHooks []UserFavoritesBacknumberHook
var userFavoritesBacknumberBeforeUpdateHooks []UserFavoritesBacknumberHook
var userFavoritesBacknumberBeforeDeleteHooks []UserFavoritesBacknumberHook
var userFavoritesBacknumberBeforeUpsertHooks []UserFavoritesBacknumberHook

var userFavoritesBacknumberAfterInsertHooks []UserFavoritesBacknumberHook
var userFavoritesBacknumberAfterSelectHooks []UserFavoritesBacknumberHook
var userFavoritesBacknumberAfterUpdateHooks []UserFavoritesBacknumberHook
var userFavoritesBacknumberAfterDeleteHooks []UserFavoritesBacknumberHook
var userFavoritesBacknumberAfterUpsertHooks []UserFavoritesBacknumberHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserFavoritesBacknumber) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoritesBacknumberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserFavoritesBacknumber) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoritesBacknumberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserFavoritesBacknumber) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoritesBacknumberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserFavoritesBacknumber) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoritesBacknumberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserFavoritesBacknumber) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoritesBacknumberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserFavoritesBacknumber) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoritesBacknumberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserFavoritesBacknumber) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoritesBacknumberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserFavoritesBacknumber) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoritesBacknumberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserFavoritesBacknumber) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userFavoritesBacknumberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserFavoritesBacknumberHook registers your hook function for all future operations.
func AddUserFavoritesBacknumberHook(hookPoint boil.HookPoint, userFavoritesBacknumberHook UserFavoritesBacknumberHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userFavoritesBacknumberBeforeInsertHooks = append(userFavoritesBacknumberBeforeInsertHooks, userFavoritesBacknumberHook)
	case boil.BeforeUpdateHook:
		userFavoritesBacknumberBeforeUpdateHooks = append(userFavoritesBacknumberBeforeUpdateHooks, userFavoritesBacknumberHook)
	case boil.BeforeDeleteHook:
		userFavoritesBacknumberBeforeDeleteHooks = append(userFavoritesBacknumberBeforeDeleteHooks, userFavoritesBacknumberHook)
	case boil.BeforeUpsertHook:
		userFavoritesBacknumberBeforeUpsertHooks = append(userFavoritesBacknumberBeforeUpsertHooks, userFavoritesBacknumberHook)
	case boil.AfterInsertHook:
		userFavoritesBacknumberAfterInsertHooks = append(userFavoritesBacknumberAfterInsertHooks, userFavoritesBacknumberHook)
	case boil.AfterSelectHook:
		userFavoritesBacknumberAfterSelectHooks = append(userFavoritesBacknumberAfterSelectHooks, userFavoritesBacknumberHook)
	case boil.AfterUpdateHook:
		userFavoritesBacknumberAfterUpdateHooks = append(userFavoritesBacknumberAfterUpdateHooks, userFavoritesBacknumberHook)
	case boil.AfterDeleteHook:
		userFavoritesBacknumberAfterDeleteHooks = append(userFavoritesBacknumberAfterDeleteHooks, userFavoritesBacknumberHook)
	case boil.AfterUpsertHook:
		userFavoritesBacknumberAfterUpsertHooks = append(userFavoritesBacknumberAfterUpsertHooks, userFavoritesBacknumberHook)
	}
}

// One returns a single userFavoritesBacknumber record from the query.
func (q userFavoritesBacknumberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserFavoritesBacknumber, error) {
	o := &UserFavoritesBacknumber{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for user_favorites_backnumber")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserFavoritesBacknumber records from the query.
func (q userFavoritesBacknumberQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserFavoritesBacknumberSlice, error) {
	var o []*UserFavoritesBacknumber

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to UserFavoritesBacknumber slice")
	}

	if len(userFavoritesBacknumberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserFavoritesBacknumber records in the query.
func (q userFavoritesBacknumberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count user_favorites_backnumber rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userFavoritesBacknumberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if user_favorites_backnumber exists")
	}

	return count > 0, nil
}

// Backnumber pointed to by the foreign key.
func (o *UserFavoritesBacknumber) Backnumber(mods ...qm.QueryMod) backnumberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BacknumberID),
	}

	queryMods = append(queryMods, mods...)

	query := Backnumbers(queryMods...)
	queries.SetFrom(query.Query, "\"backnumbers\"")

	return query
}

// User pointed to by the foreign key.
func (o *UserFavoritesBacknumber) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadBacknumber allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFavoritesBacknumberL) LoadBacknumber(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserFavoritesBacknumber interface{}, mods queries.Applicator) error {
	var slice []*UserFavoritesBacknumber
	var object *UserFavoritesBacknumber

	if singular {
		object = maybeUserFavoritesBacknumber.(*UserFavoritesBacknumber)
	} else {
		slice = *maybeUserFavoritesBacknumber.(*[]*UserFavoritesBacknumber)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userFavoritesBacknumberR{}
		}
		args = append(args, object.BacknumberID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFavoritesBacknumberR{}
			}

			for _, a := range args {
				if a == obj.BacknumberID {
					continue Outer
				}
			}

			args = append(args, obj.BacknumberID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`backnumbers`),
		qm.WhereIn(`backnumbers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Backnumber")
	}

	var resultSlice []*Backnumber
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Backnumber")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for backnumbers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for backnumbers")
	}

	if len(userFavoritesBacknumberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Backnumber = foreign
		if foreign.R == nil {
			foreign.R = &backnumberR{}
		}
		foreign.R.UserFavoritesBacknumbers = append(foreign.R.UserFavoritesBacknumbers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BacknumberID == foreign.ID {
				local.R.Backnumber = foreign
				if foreign.R == nil {
					foreign.R = &backnumberR{}
				}
				foreign.R.UserFavoritesBacknumbers = append(foreign.R.UserFavoritesBacknumbers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userFavoritesBacknumberL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserFavoritesBacknumber interface{}, mods queries.Applicator) error {
	var slice []*UserFavoritesBacknumber
	var object *UserFavoritesBacknumber

	if singular {
		object = maybeUserFavoritesBacknumber.(*UserFavoritesBacknumber)
	} else {
		slice = *maybeUserFavoritesBacknumber.(*[]*UserFavoritesBacknumber)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userFavoritesBacknumberR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userFavoritesBacknumberR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userFavoritesBacknumberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserFavoritesBacknumbers = append(foreign.R.UserFavoritesBacknumbers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserFavoritesBacknumbers = append(foreign.R.UserFavoritesBacknumbers, local)
				break
			}
		}
	}

	return nil
}

// SetBacknumber of the userFavoritesBacknumber to the related item.
// Sets o.R.Backnumber to related.
// Adds o to related.R.UserFavoritesBacknumbers.
func (o *UserFavoritesBacknumber) SetBacknumber(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Backnumber) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_favorites_backnumber\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"backnumber_id"}),
		strmangle.WhereClause("\"", "\"", 2, userFavoritesBacknumberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BacknumberID = related.ID
	if o.R == nil {
		o.R = &userFavoritesBacknumberR{
			Backnumber: related,
		}
	} else {
		o.R.Backnumber = related
	}

	if related.R == nil {
		related.R = &backnumberR{
			UserFavoritesBacknumbers: UserFavoritesBacknumberSlice{o},
		}
	} else {
		related.R.UserFavoritesBacknumbers = append(related.R.UserFavoritesBacknumbers, o)
	}

	return nil
}

// SetUser of the userFavoritesBacknumber to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserFavoritesBacknumbers.
func (o *UserFavoritesBacknumber) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_favorites_backnumber\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userFavoritesBacknumberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userFavoritesBacknumberR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserFavoritesBacknumbers: UserFavoritesBacknumberSlice{o},
		}
	} else {
		related.R.UserFavoritesBacknumbers = append(related.R.UserFavoritesBacknumbers, o)
	}

	return nil
}

// UserFavoritesBacknumbers retrieves all the records using an executor.
func UserFavoritesBacknumbers(mods ...qm.QueryMod) userFavoritesBacknumberQuery {
	mods = append(mods, qm.From("\"user_favorites_backnumber\""))
	return userFavoritesBacknumberQuery{NewQuery(mods...)}
}

// FindUserFavoritesBacknumber retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserFavoritesBacknumber(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserFavoritesBacknumber, error) {
	userFavoritesBacknumberObj := &UserFavoritesBacknumber{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_favorites_backnumber\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userFavoritesBacknumberObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from user_favorites_backnumber")
	}

	if err = userFavoritesBacknumberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userFavoritesBacknumberObj, err
	}

	return userFavoritesBacknumberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserFavoritesBacknumber) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no user_favorites_backnumber provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userFavoritesBacknumberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userFavoritesBacknumberInsertCacheMut.RLock()
	cache, cached := userFavoritesBacknumberInsertCache[key]
	userFavoritesBacknumberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userFavoritesBacknumberAllColumns,
			userFavoritesBacknumberColumnsWithDefault,
			userFavoritesBacknumberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userFavoritesBacknumberType, userFavoritesBacknumberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userFavoritesBacknumberType, userFavoritesBacknumberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_favorites_backnumber\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_favorites_backnumber\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into user_favorites_backnumber")
	}

	if !cached {
		userFavoritesBacknumberInsertCacheMut.Lock()
		userFavoritesBacknumberInsertCache[key] = cache
		userFavoritesBacknumberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserFavoritesBacknumber.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserFavoritesBacknumber) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userFavoritesBacknumberUpdateCacheMut.RLock()
	cache, cached := userFavoritesBacknumberUpdateCache[key]
	userFavoritesBacknumberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userFavoritesBacknumberAllColumns,
			userFavoritesBacknumberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update user_favorites_backnumber, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_favorites_backnumber\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userFavoritesBacknumberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userFavoritesBacknumberType, userFavoritesBacknumberMapping, append(wl, userFavoritesBacknumberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update user_favorites_backnumber row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for user_favorites_backnumber")
	}

	if !cached {
		userFavoritesBacknumberUpdateCacheMut.Lock()
		userFavoritesBacknumberUpdateCache[key] = cache
		userFavoritesBacknumberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userFavoritesBacknumberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for user_favorites_backnumber")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for user_favorites_backnumber")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserFavoritesBacknumberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavoritesBacknumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_favorites_backnumber\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userFavoritesBacknumberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in userFavoritesBacknumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all userFavoritesBacknumber")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserFavoritesBacknumber) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no user_favorites_backnumber provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userFavoritesBacknumberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userFavoritesBacknumberUpsertCacheMut.RLock()
	cache, cached := userFavoritesBacknumberUpsertCache[key]
	userFavoritesBacknumberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userFavoritesBacknumberAllColumns,
			userFavoritesBacknumberColumnsWithDefault,
			userFavoritesBacknumberColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userFavoritesBacknumberAllColumns,
			userFavoritesBacknumberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert user_favorites_backnumber, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userFavoritesBacknumberPrimaryKeyColumns))
			copy(conflict, userFavoritesBacknumberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_favorites_backnumber\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userFavoritesBacknumberType, userFavoritesBacknumberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userFavoritesBacknumberType, userFavoritesBacknumberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert user_favorites_backnumber")
	}

	if !cached {
		userFavoritesBacknumberUpsertCacheMut.Lock()
		userFavoritesBacknumberUpsertCache[key] = cache
		userFavoritesBacknumberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserFavoritesBacknumber record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserFavoritesBacknumber) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no UserFavoritesBacknumber provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userFavoritesBacknumberPrimaryKeyMapping)
	sql := "DELETE FROM \"user_favorites_backnumber\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from user_favorites_backnumber")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for user_favorites_backnumber")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userFavoritesBacknumberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no userFavoritesBacknumberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from user_favorites_backnumber")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for user_favorites_backnumber")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserFavoritesBacknumberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userFavoritesBacknumberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavoritesBacknumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_favorites_backnumber\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userFavoritesBacknumberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from userFavoritesBacknumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for user_favorites_backnumber")
	}

	if len(userFavoritesBacknumberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserFavoritesBacknumber) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserFavoritesBacknumber(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserFavoritesBacknumberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserFavoritesBacknumberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userFavoritesBacknumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_favorites_backnumber\".* FROM \"user_favorites_backnumber\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userFavoritesBacknumberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in UserFavoritesBacknumberSlice")
	}

	*o = slice

	return nil
}

// UserFavoritesBacknumberExists checks if the UserFavoritesBacknumber row exists.
func UserFavoritesBacknumberExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_favorites_backnumber\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if user_favorites_backnumber exists")
	}

	return exists, nil
}
