// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type BaseUser interface {
	IsBaseUser()
}

type Backnumber struct {
	ID          string           `json:"id"`
	UUID        string           `json:"uuid"`
	Author      *PublicUser      `json:"author"`
	Work        *Works           `json:"work"`
	Title       string           `json:"title"`
	Description string           `json:"description"`
	Thumnail    string           `json:"thumnail"`
	URL         string           `json:"url"`
	Tag         []*BacknumberTag `json:"tag"`
	CreatedAt   string           `json:"created_at"`
	UpdatedAt   string           `json:"updated_at"`
}

type CreateBacknumberInput struct {
	WorksID     string           `json:"works_id"`
	Title       string           `json:"title"`
	Description string           `json:"description"`
	Thumnail    string           `json:"thumnail"`
	Image       string           `json:"image"`
	Tags        []*BacknumberTag `json:"tags"`
}

type CreateUserInput struct {
	Email      string   `json:"email"`
	Token      string   `json:"token"`
	Provider   Provider `json:"provider"`
	Cledential string   `json:"cledential"`
}

type DeleteBacknumberInput struct {
	ID string `json:"id"`
}

type PrivateUser struct {
	ID                  string        `json:"id"`
	Name                string        `json:"name"`
	Works               []*Works      `json:"works"`
	PhotoURL            string        `json:"photo_url"`
	Suspended           bool          `json:"suspended"`
	FavoriteBacknumbers []*Backnumber `json:"favorite_backnumbers"`
	FavoriteWorks       []*Works      `json:"favorite_works"`
	CreatedAt           string        `json:"created_at"`
	Suspend             bool          `json:"suspend"`
	Email               string        `json:"email"`
	UpdatedAt           string        `json:"updated_at"`
}

func (PrivateUser) IsBaseUser() {}

type PublicUser struct {
	ID                  string        `json:"id"`
	Name                string        `json:"name"`
	Works               []*Works      `json:"works"`
	PhotoURL            string        `json:"photo_url"`
	FavoriteBacknumbers []*Backnumber `json:"favorite_backnumbers"`
	FavoriteWorks       []*Works      `json:"favorite_works"`
	CreatedAt           string        `json:"created_at"`
}

func (PublicUser) IsBaseUser() {}

type UpdateBacknumberInput struct {
	ID          string           `json:"id"`
	Title       *string          `json:"title"`
	Description *string          `json:"description"`
	Thumnail    *string          `json:"thumnail"`
	Image       *string          `json:"image"`
	Tags        []*BacknumberTag `json:"tags"`
}

type UpdateUserInput struct {
	ID    string  `json:"id"`
	Token string  `json:"token"`
	Name  *string `json:"name"`
	Email *string `json:"email"`
}

type Works struct {
	ID          string           `json:"id"`
	Author      *PublicUser      `json:"author"`
	Title       string           `json:"title"`
	Description string           `json:"description"`
	Image       string           `json:"image"`
	URL         string           `json:"url"`
	Backnumbers []*Backnumber    `json:"backnumbers"`
	Category    []*WorksCategory `json:"category"`
	Thumbnail   string           `json:"thumbnail"`
	Private     bool             `json:"private"`
	CreatedAt   string           `json:"created_at"`
	UpdatedAt   string           `json:"updated_at"`
}

type BacknumberTag string

const (
	BacknumberTagImpressed BacknumberTag = "IMPRESSED"
	BacknumberTagSad       BacknumberTag = "SAD"
	BacknumberTagCaotic    BacknumberTag = "CAOTIC"
)

var AllBacknumberTag = []BacknumberTag{
	BacknumberTagImpressed,
	BacknumberTagSad,
	BacknumberTagCaotic,
}

func (e BacknumberTag) IsValid() bool {
	switch e {
	case BacknumberTagImpressed, BacknumberTagSad, BacknumberTagCaotic:
		return true
	}
	return false
}

func (e BacknumberTag) String() string {
	return string(e)
}

func (e *BacknumberTag) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BacknumberTag(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BacknumberTag", str)
	}
	return nil
}

func (e BacknumberTag) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Provider string

const (
	ProviderTwitter Provider = "TWITTER"
	ProviderGithub  Provider = "GITHUB"
	ProviderGoogle  Provider = "GOOGLE"
)

var AllProvider = []Provider{
	ProviderTwitter,
	ProviderGithub,
	ProviderGoogle,
}

func (e Provider) IsValid() bool {
	switch e {
	case ProviderTwitter, ProviderGithub, ProviderGoogle:
		return true
	}
	return false
}

func (e Provider) String() string {
	return string(e)
}

func (e *Provider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Provider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Provider", str)
	}
	return nil
}

func (e Provider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type WorksCategory string

const (
	WorksCategoryAcademy    WorksCategory = "ACADEMY"
	WorksCategoryLovecomedy WorksCategory = "LOVECOMEDY"
	WorksCategoryMystery    WorksCategory = "MYSTERY"
	WorksCategoryFantasy    WorksCategory = "FANTASY"
)

var AllWorksCategory = []WorksCategory{
	WorksCategoryAcademy,
	WorksCategoryLovecomedy,
	WorksCategoryMystery,
	WorksCategoryFantasy,
}

func (e WorksCategory) IsValid() bool {
	switch e {
	case WorksCategoryAcademy, WorksCategoryLovecomedy, WorksCategoryMystery, WorksCategoryFantasy:
		return true
	}
	return false
}

func (e WorksCategory) String() string {
	return string(e)
}

func (e *WorksCategory) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = WorksCategory(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid WorksCategory", str)
	}
	return nil
}

func (e WorksCategory) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
