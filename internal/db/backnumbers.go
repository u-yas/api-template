// Code generated by SQLBoiler 4.8.3 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package db

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Backnumber is an object representing the database table.
type Backnumber struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	UUID          string    `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	WorksID       int       `boil:"works_id" json:"works_id" toml:"works_id" yaml:"works_id"`
	UserID        int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Title         string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	Description   string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	ThumbnailURL  string    `boil:"thumbnail_url" json:"thumbnail_url" toml:"thumbnail_url" yaml:"thumbnail_url"`
	ViewCount     int       `boil:"view_count" json:"view_count" toml:"view_count" yaml:"view_count"`
	Public        bool      `boil:"public" json:"public" toml:"public" yaml:"public"`
	BacknumberURL string    `boil:"backnumber_url" json:"backnumber_url" toml:"backnumber_url" yaml:"backnumber_url"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *backnumberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L backnumberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BacknumberColumns = struct {
	ID            string
	UUID          string
	WorksID       string
	UserID        string
	Title         string
	Description   string
	ThumbnailURL  string
	ViewCount     string
	Public        string
	BacknumberURL string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	UUID:          "uuid",
	WorksID:       "works_id",
	UserID:        "user_id",
	Title:         "title",
	Description:   "description",
	ThumbnailURL:  "thumbnail_url",
	ViewCount:     "view_count",
	Public:        "public",
	BacknumberURL: "backnumber_url",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

var BacknumberTableColumns = struct {
	ID            string
	UUID          string
	WorksID       string
	UserID        string
	Title         string
	Description   string
	ThumbnailURL  string
	ViewCount     string
	Public        string
	BacknumberURL string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "backnumbers.id",
	UUID:          "backnumbers.uuid",
	WorksID:       "backnumbers.works_id",
	UserID:        "backnumbers.user_id",
	Title:         "backnumbers.title",
	Description:   "backnumbers.description",
	ThumbnailURL:  "backnumbers.thumbnail_url",
	ViewCount:     "backnumbers.view_count",
	Public:        "backnumbers.public",
	BacknumberURL: "backnumbers.backnumber_url",
	CreatedAt:     "backnumbers.created_at",
	UpdatedAt:     "backnumbers.updated_at",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var BacknumberWhere = struct {
	ID            whereHelperint
	UUID          whereHelperstring
	WorksID       whereHelperint
	UserID        whereHelperint
	Title         whereHelperstring
	Description   whereHelperstring
	ThumbnailURL  whereHelperstring
	ViewCount     whereHelperint
	Public        whereHelperbool
	BacknumberURL whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint{field: "\"backnumbers\".\"id\""},
	UUID:          whereHelperstring{field: "\"backnumbers\".\"uuid\""},
	WorksID:       whereHelperint{field: "\"backnumbers\".\"works_id\""},
	UserID:        whereHelperint{field: "\"backnumbers\".\"user_id\""},
	Title:         whereHelperstring{field: "\"backnumbers\".\"title\""},
	Description:   whereHelperstring{field: "\"backnumbers\".\"description\""},
	ThumbnailURL:  whereHelperstring{field: "\"backnumbers\".\"thumbnail_url\""},
	ViewCount:     whereHelperint{field: "\"backnumbers\".\"view_count\""},
	Public:        whereHelperbool{field: "\"backnumbers\".\"public\""},
	BacknumberURL: whereHelperstring{field: "\"backnumbers\".\"backnumber_url\""},
	CreatedAt:     whereHelpertime_Time{field: "\"backnumbers\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"backnumbers\".\"updated_at\""},
}

// BacknumberRels is where relationship names are stored.
var BacknumberRels = struct {
	User                     string
	Work                     string
	UserFavoritesBacknumbers string
}{
	User:                     "User",
	Work:                     "Work",
	UserFavoritesBacknumbers: "UserFavoritesBacknumbers",
}

// backnumberR is where relationships are stored.
type backnumberR struct {
	User                     *User                        `boil:"User" json:"User" toml:"User" yaml:"User"`
	Work                     *Work                        `boil:"Work" json:"Work" toml:"Work" yaml:"Work"`
	UserFavoritesBacknumbers UserFavoritesBacknumberSlice `boil:"UserFavoritesBacknumbers" json:"UserFavoritesBacknumbers" toml:"UserFavoritesBacknumbers" yaml:"UserFavoritesBacknumbers"`
}

// NewStruct creates a new relationship struct
func (*backnumberR) NewStruct() *backnumberR {
	return &backnumberR{}
}

// backnumberL is where Load methods for each relationship are stored.
type backnumberL struct{}

var (
	backnumberAllColumns            = []string{"id", "uuid", "works_id", "user_id", "title", "description", "thumbnail_url", "view_count", "public", "backnumber_url", "created_at", "updated_at"}
	backnumberColumnsWithoutDefault = []string{"uuid", "works_id", "user_id", "title", "description", "thumbnail_url", "backnumber_url", "created_at", "updated_at"}
	backnumberColumnsWithDefault    = []string{"id", "view_count", "public"}
	backnumberPrimaryKeyColumns     = []string{"id"}
)

type (
	// BacknumberSlice is an alias for a slice of pointers to Backnumber.
	// This should almost always be used instead of []Backnumber.
	BacknumberSlice []*Backnumber
	// BacknumberHook is the signature for custom Backnumber hook methods
	BacknumberHook func(context.Context, boil.ContextExecutor, *Backnumber) error

	backnumberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	backnumberType                 = reflect.TypeOf(&Backnumber{})
	backnumberMapping              = queries.MakeStructMapping(backnumberType)
	backnumberPrimaryKeyMapping, _ = queries.BindMapping(backnumberType, backnumberMapping, backnumberPrimaryKeyColumns)
	backnumberInsertCacheMut       sync.RWMutex
	backnumberInsertCache          = make(map[string]insertCache)
	backnumberUpdateCacheMut       sync.RWMutex
	backnumberUpdateCache          = make(map[string]updateCache)
	backnumberUpsertCacheMut       sync.RWMutex
	backnumberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var backnumberBeforeInsertHooks []BacknumberHook
var backnumberBeforeUpdateHooks []BacknumberHook
var backnumberBeforeDeleteHooks []BacknumberHook
var backnumberBeforeUpsertHooks []BacknumberHook

var backnumberAfterInsertHooks []BacknumberHook
var backnumberAfterSelectHooks []BacknumberHook
var backnumberAfterUpdateHooks []BacknumberHook
var backnumberAfterDeleteHooks []BacknumberHook
var backnumberAfterUpsertHooks []BacknumberHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Backnumber) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backnumberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Backnumber) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backnumberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Backnumber) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backnumberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Backnumber) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backnumberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Backnumber) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backnumberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Backnumber) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backnumberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Backnumber) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backnumberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Backnumber) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backnumberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Backnumber) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range backnumberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBacknumberHook registers your hook function for all future operations.
func AddBacknumberHook(hookPoint boil.HookPoint, backnumberHook BacknumberHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		backnumberBeforeInsertHooks = append(backnumberBeforeInsertHooks, backnumberHook)
	case boil.BeforeUpdateHook:
		backnumberBeforeUpdateHooks = append(backnumberBeforeUpdateHooks, backnumberHook)
	case boil.BeforeDeleteHook:
		backnumberBeforeDeleteHooks = append(backnumberBeforeDeleteHooks, backnumberHook)
	case boil.BeforeUpsertHook:
		backnumberBeforeUpsertHooks = append(backnumberBeforeUpsertHooks, backnumberHook)
	case boil.AfterInsertHook:
		backnumberAfterInsertHooks = append(backnumberAfterInsertHooks, backnumberHook)
	case boil.AfterSelectHook:
		backnumberAfterSelectHooks = append(backnumberAfterSelectHooks, backnumberHook)
	case boil.AfterUpdateHook:
		backnumberAfterUpdateHooks = append(backnumberAfterUpdateHooks, backnumberHook)
	case boil.AfterDeleteHook:
		backnumberAfterDeleteHooks = append(backnumberAfterDeleteHooks, backnumberHook)
	case boil.AfterUpsertHook:
		backnumberAfterUpsertHooks = append(backnumberAfterUpsertHooks, backnumberHook)
	}
}

// One returns a single backnumber record from the query.
func (q backnumberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Backnumber, error) {
	o := &Backnumber{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: failed to execute a one query for backnumbers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Backnumber records from the query.
func (q backnumberQuery) All(ctx context.Context, exec boil.ContextExecutor) (BacknumberSlice, error) {
	var o []*Backnumber

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "db: failed to assign all query results to Backnumber slice")
	}

	if len(backnumberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Backnumber records in the query.
func (q backnumberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to count backnumbers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q backnumberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "db: failed to check if backnumbers exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Backnumber) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Work pointed to by the foreign key.
func (o *Backnumber) Work(mods ...qm.QueryMod) workQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.WorksID),
	}

	queryMods = append(queryMods, mods...)

	query := Works(queryMods...)
	queries.SetFrom(query.Query, "\"works\"")

	return query
}

// UserFavoritesBacknumbers retrieves all the user_favorites_backnumber's UserFavoritesBacknumbers with an executor.
func (o *Backnumber) UserFavoritesBacknumbers(mods ...qm.QueryMod) userFavoritesBacknumberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_favorites_backnumber\".\"backnumber_id\"=?", o.ID),
	)

	query := UserFavoritesBacknumbers(queryMods...)
	queries.SetFrom(query.Query, "\"user_favorites_backnumber\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"user_favorites_backnumber\".*"})
	}

	return query
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (backnumberL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBacknumber interface{}, mods queries.Applicator) error {
	var slice []*Backnumber
	var object *Backnumber

	if singular {
		object = maybeBacknumber.(*Backnumber)
	} else {
		slice = *maybeBacknumber.(*[]*Backnumber)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &backnumberR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &backnumberR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(backnumberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Backnumbers = append(foreign.R.Backnumbers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Backnumbers = append(foreign.R.Backnumbers, local)
				break
			}
		}
	}

	return nil
}

// LoadWork allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (backnumberL) LoadWork(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBacknumber interface{}, mods queries.Applicator) error {
	var slice []*Backnumber
	var object *Backnumber

	if singular {
		object = maybeBacknumber.(*Backnumber)
	} else {
		slice = *maybeBacknumber.(*[]*Backnumber)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &backnumberR{}
		}
		args = append(args, object.WorksID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &backnumberR{}
			}

			for _, a := range args {
				if a == obj.WorksID {
					continue Outer
				}
			}

			args = append(args, obj.WorksID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`works`),
		qm.WhereIn(`works.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Work")
	}

	var resultSlice []*Work
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Work")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for works")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for works")
	}

	if len(backnumberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Work = foreign
		if foreign.R == nil {
			foreign.R = &workR{}
		}
		foreign.R.Backnumbers = append(foreign.R.Backnumbers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.WorksID == foreign.ID {
				local.R.Work = foreign
				if foreign.R == nil {
					foreign.R = &workR{}
				}
				foreign.R.Backnumbers = append(foreign.R.Backnumbers, local)
				break
			}
		}
	}

	return nil
}

// LoadUserFavoritesBacknumbers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (backnumberL) LoadUserFavoritesBacknumbers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBacknumber interface{}, mods queries.Applicator) error {
	var slice []*Backnumber
	var object *Backnumber

	if singular {
		object = maybeBacknumber.(*Backnumber)
	} else {
		slice = *maybeBacknumber.(*[]*Backnumber)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &backnumberR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &backnumberR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user_favorites_backnumber`),
		qm.WhereIn(`user_favorites_backnumber.backnumber_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_favorites_backnumber")
	}

	var resultSlice []*UserFavoritesBacknumber
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_favorites_backnumber")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_favorites_backnumber")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_favorites_backnumber")
	}

	if len(userFavoritesBacknumberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserFavoritesBacknumbers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userFavoritesBacknumberR{}
			}
			foreign.R.Backnumber = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BacknumberID {
				local.R.UserFavoritesBacknumbers = append(local.R.UserFavoritesBacknumbers, foreign)
				if foreign.R == nil {
					foreign.R = &userFavoritesBacknumberR{}
				}
				foreign.R.Backnumber = local
				break
			}
		}
	}

	return nil
}

// SetUser of the backnumber to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Backnumbers.
func (o *Backnumber) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"backnumbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, backnumberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &backnumberR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Backnumbers: BacknumberSlice{o},
		}
	} else {
		related.R.Backnumbers = append(related.R.Backnumbers, o)
	}

	return nil
}

// SetWork of the backnumber to the related item.
// Sets o.R.Work to related.
// Adds o to related.R.Backnumbers.
func (o *Backnumber) SetWork(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Work) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"backnumbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"works_id"}),
		strmangle.WhereClause("\"", "\"", 2, backnumberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.WorksID = related.ID
	if o.R == nil {
		o.R = &backnumberR{
			Work: related,
		}
	} else {
		o.R.Work = related
	}

	if related.R == nil {
		related.R = &workR{
			Backnumbers: BacknumberSlice{o},
		}
	} else {
		related.R.Backnumbers = append(related.R.Backnumbers, o)
	}

	return nil
}

// AddUserFavoritesBacknumbers adds the given related objects to the existing relationships
// of the backnumber, optionally inserting them as new records.
// Appends related to o.R.UserFavoritesBacknumbers.
// Sets related.R.Backnumber appropriately.
func (o *Backnumber) AddUserFavoritesBacknumbers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserFavoritesBacknumber) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BacknumberID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_favorites_backnumber\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"backnumber_id"}),
				strmangle.WhereClause("\"", "\"", 2, userFavoritesBacknumberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BacknumberID = o.ID
		}
	}

	if o.R == nil {
		o.R = &backnumberR{
			UserFavoritesBacknumbers: related,
		}
	} else {
		o.R.UserFavoritesBacknumbers = append(o.R.UserFavoritesBacknumbers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userFavoritesBacknumberR{
				Backnumber: o,
			}
		} else {
			rel.R.Backnumber = o
		}
	}
	return nil
}

// Backnumbers retrieves all the records using an executor.
func Backnumbers(mods ...qm.QueryMod) backnumberQuery {
	mods = append(mods, qm.From("\"backnumbers\""))
	return backnumberQuery{NewQuery(mods...)}
}

// FindBacknumber retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBacknumber(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Backnumber, error) {
	backnumberObj := &Backnumber{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"backnumbers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, backnumberObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "db: unable to select from backnumbers")
	}

	if err = backnumberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return backnumberObj, err
	}

	return backnumberObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Backnumber) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("db: no backnumbers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(backnumberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	backnumberInsertCacheMut.RLock()
	cache, cached := backnumberInsertCache[key]
	backnumberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			backnumberAllColumns,
			backnumberColumnsWithDefault,
			backnumberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(backnumberType, backnumberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(backnumberType, backnumberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"backnumbers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"backnumbers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "db: unable to insert into backnumbers")
	}

	if !cached {
		backnumberInsertCacheMut.Lock()
		backnumberInsertCache[key] = cache
		backnumberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Backnumber.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Backnumber) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	backnumberUpdateCacheMut.RLock()
	cache, cached := backnumberUpdateCache[key]
	backnumberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			backnumberAllColumns,
			backnumberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("db: unable to update backnumbers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"backnumbers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, backnumberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(backnumberType, backnumberMapping, append(wl, backnumberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update backnumbers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by update for backnumbers")
	}

	if !cached {
		backnumberUpdateCacheMut.Lock()
		backnumberUpdateCache[key] = cache
		backnumberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q backnumberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all for backnumbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected for backnumbers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BacknumberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("db: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), backnumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"backnumbers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, backnumberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to update all in backnumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to retrieve rows affected all in update all backnumber")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Backnumber) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("db: no backnumbers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(backnumberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	backnumberUpsertCacheMut.RLock()
	cache, cached := backnumberUpsertCache[key]
	backnumberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			backnumberAllColumns,
			backnumberColumnsWithDefault,
			backnumberColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			backnumberAllColumns,
			backnumberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("db: unable to upsert backnumbers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(backnumberPrimaryKeyColumns))
			copy(conflict, backnumberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"backnumbers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(backnumberType, backnumberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(backnumberType, backnumberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "db: unable to upsert backnumbers")
	}

	if !cached {
		backnumberUpsertCacheMut.Lock()
		backnumberUpsertCache[key] = cache
		backnumberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Backnumber record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Backnumber) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("db: no Backnumber provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), backnumberPrimaryKeyMapping)
	sql := "DELETE FROM \"backnumbers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete from backnumbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by delete for backnumbers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q backnumberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("db: no backnumberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from backnumbers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for backnumbers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BacknumberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(backnumberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), backnumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"backnumbers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, backnumberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "db: unable to delete all from backnumber slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "db: failed to get rows affected by deleteall for backnumbers")
	}

	if len(backnumberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Backnumber) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBacknumber(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BacknumberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BacknumberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), backnumberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"backnumbers\".* FROM \"backnumbers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, backnumberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "db: unable to reload all in BacknumberSlice")
	}

	*o = slice

	return nil
}

// BacknumberExists checks if the Backnumber row exists.
func BacknumberExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"backnumbers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "db: unable to check if backnumbers exists")
	}

	return exists, nil
}
